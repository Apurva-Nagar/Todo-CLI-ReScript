// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Os = require("os");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var encoding = "utf8";

var getToday = (function() {
  let date = new Date();
  return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
    .toISOString()
    .split("T")[0];
});

var pendingTodosFile = "todo.txt";

var completedTodosFile = "done.txt";

var helpString = "Usage :-\n$ ./todo add \"todo item\"  # Add a new todo\n$ ./todo ls               # Show remaining todos\n$ ./todo del NUMBER       # Delete a todo\n$ ./todo done NUMBER      # Complete a todo\n$ ./todo help             # Show usage\n$ ./todo report           # Statistics";

function readFile(filename) {
  if (!Fs.existsSync(filename)) {
    return [];
  }
  var text = Fs.readFileSync(filename, {
        encoding: encoding,
        flag: "r"
      });
  return text.split("\n");
}

function appendToFile(filename, text) {
  Fs.appendFileSync(filename, text, {
        encoding: encoding,
        flag: "a+"
      });
  
}

function writeFile(filename, lines) {
  var text = lines.join(Os.EOL);
  Fs.writeFileSync(filename, text, {
        encoding: encoding,
        flag: "w"
      });
  
}

function updateFile(filename, updaterFn) {
  var contents = readFile(filename);
  var updatedContent = Curry._1(updaterFn, contents);
  return writeFile(filename, updatedContent);
}

function cmdHelp(param) {
  console.log(helpString);
  
}

function cmdLs(param) {
  var todos = readFile(pendingTodosFile);
  if (todos.length === 0) {
    console.log("There are no pending todos!");
    return ;
  }
  var length = todos.length;
  var formattedTodos = Belt_Array.reduceWithIndex(Belt_Array.reverse(todos), "", (function (acc, todo, index) {
          var todoIndex = length - index | 0;
          return acc + ("[" + todoIndex + "] " + todo + "\n");
        }));
  console.log(formattedTodos);
  
}

function cmdAddTodo(text) {
  var cmdStatus = Belt_Option.mapWithDefault(text, "Error: Missing todo string. Nothing added!", (function (x) {
          updateFile(pendingTodosFile, (function (todos) {
                  return todos.concat([x]);
                }));
          return "Added todo: \"" + x + "\"";
        }));
  console.log(cmdStatus);
  
}

function cmdDelTodo(number) {
  var cmdStatus = Belt_Option.mapWithDefault(number, "Error: Missing NUMBER for deleting todo.", (function (x) {
          var index = Number.parseInt(x);
          var todos = readFile(pendingTodosFile);
          if (index < 1 || index > todos.length) {
            return "Error: todo #" + index + " does not exist. Nothing deleted.";
          } else {
            updateFile(pendingTodosFile, (function (todos) {
                    todos.splice(index, 1);
                    return todos;
                  }));
            return "Deleted todo #" + number;
          }
        }));
  console.log(cmdStatus);
  
}

function cmdMarkDone(number) {
  var cmdStatus = Belt_Option.mapWithDefault(number, "Error: Missing NUMBER for marking todo as done.", (function (x) {
          var index = Number.parseInt(x);
          var todos = readFile(pendingTodosFile);
          if (index < 1 || index > todos.length) {
            return "Error: todo #" + number + " does not exist.";
          }
          var completedTodo = todos.splice(index - 1 | 0, 1);
          writeFile(pendingTodosFile, todos);
          var completedTodoStr = "x " + Curry._1(getToday, undefined) + " " + Caml_array.get(completedTodo, 0) + "\n";
          appendToFile(completedTodosFile, completedTodoStr);
          return "Marked todo #" + index + " as done.";
        }));
  console.log(cmdStatus);
  
}

function cmdReport(param) {
  var pending = readFile(pendingTodosFile).length;
  var completed = readFile(completedTodosFile).length - 1 | 0;
  console.log(Curry._1(getToday, undefined) + " Pending : " + String(pending) + " Completed : " + String(completed));
  
}

var command = Belt_Array.get(process.argv, 2);

var arg = Belt_Array.get(process.argv, 3);

if (command !== undefined) {
  switch (command) {
    case "add" :
        cmdAddTodo(arg);
        break;
    case "del" :
        cmdDelTodo(arg);
        break;
    case "done" :
        cmdMarkDone(arg);
        break;
    case "help" :
        console.log(helpString);
        break;
    case "ls" :
        cmdLs(undefined);
        break;
    case "report" :
        cmdReport(undefined);
        break;
    default:
      console.log(helpString);
  }
} else {
  console.log(helpString);
}

exports.encoding = encoding;
exports.getToday = getToday;
exports.pendingTodosFile = pendingTodosFile;
exports.completedTodosFile = completedTodosFile;
exports.helpString = helpString;
exports.readFile = readFile;
exports.appendToFile = appendToFile;
exports.writeFile = writeFile;
exports.updateFile = updateFile;
exports.cmdHelp = cmdHelp;
exports.cmdLs = cmdLs;
exports.cmdAddTodo = cmdAddTodo;
exports.cmdDelTodo = cmdDelTodo;
exports.cmdMarkDone = cmdMarkDone;
exports.cmdReport = cmdReport;
exports.command = command;
exports.arg = arg;
/* command Not a pure module */
